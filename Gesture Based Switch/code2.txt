/*!
 * \name        Smart Switch Demo
 * \author      Muhammad Hamza Jawaid
 * \brief       
 * \details 
 * @date 22-07-2021   
 *
 *            
 */

/******Includes******/
#include <Arduino.h>
#include <Servo.h>
#include <bgt60-ino.hpp>
#include <bgt60-platf-ino.hpp>
#include <WiFiNINA.h>//wifi library for mkrwifi 1010
#include <utility/wifi_drv.h>//library for onboard LED control

/*
* In case no supported platform is defined, the
* PD and TD pin are set to the values below.
*/
#ifndef TD
#define TD  15
#endif

#ifndef PD
#define PD  16
#endif

/******Defines******/
#define approach Bgt60::APPROACHING
#define depart Bgt60::DEPARTING
#define nodir Bgt60::NO_DIR

/******Variables******/
Servo myservo;
int GreenLED=25;//Pin number for onboard Green LED
int RedLED=26;//Pin number for onboard Red LED
int BlueLED=27;//Pin number for onboard Blue LED
int Led=14;
unsigned long myTime1;
unsigned long myTime2;
unsigned long t1;
unsigned long t2;
const long interval = 500; 
const long interval_2 = 170; 
int servopos=90;
int prev_state=0;
int curr_state;
Bgt60::Motion_t motion;
Bgt60::Direction_t direction;

/* Functions */
bool DirChanged(Bgt60::Direction_t dir);
bool Gesture(Bgt60::Direction_t *dir2);

/* Create radar object with following arguments:
 *  TD : Target Detect Pin
 *  PD : Phase Detect Pin */
Bgt60Ino radarShield(TD, PD);

/* Begin setup function - takes care of initialization and executes only once post reset */
void setup()
{
    /* Set the baud rate for sending messages to the serial monitor */
    Serial.begin(9600);
    WiFiDrv::pinMode(RedLED, OUTPUT); //syntax defining MKR wifi1010 onboard LED as OUTPUT.
    WiFiDrv::pinMode(BlueLED, OUTPUT); 
    WiFiDrv::pinMode(GreenLED, OUTPUT);
    pinMode(Led,OUTPUT);
    myservo.attach(9); 
    
    // Configures the GPIO pins to input mode
    Error_t init_status = radarShield.init();
    /* Check if the initialization was successful */
    if (OK != init_status) {
        Serial.println("Init failed.");
    }
    else {
        Serial.println("Init successful.");
    }
}
Error_t err;

/* Begin loop function - this part of code is executed continuously until external termination */
void loop()
{
  /* Create variables to store the state of the motion as well as the direction */
 motion = Bgt60::NO_MOTION;
  /* Initialize the variable to NO_DIR to be able to record new events */
 err = radarShield.getMotion(motion);

 if(err == OK)
    {
    if (motion==Bgt60::MOTION)
    {
      Serial.println("Motion");
      WiFiDrv::digitalWrite(RedLED, HIGH);
      WiFiDrv::digitalWrite(BlueLED, LOW);
      WiFiDrv::digitalWrite(GreenLED, LOW);

     start:           
    direction = nodir;
    curr_state=0;    
myTime1=millis();
//Serial.println(myTime1);
int b=0; 
while(1)
{

while(1)
{
    err = radarShield.getDirection(direction);
    if (err == OK)
    {
        switch (direction)
        {
            case Bgt60::APPROACHING:
                curr_state=1;
                break;
            case Bgt60::DEPARTING:
                curr_state=2;
                break;

            case Bgt60::NO_DIR:
                curr_state=0;
                Serial.println("No Direction");
                break;
        }

    }

    if(prev_state!=curr_state)
    {
      prev_state=curr_state;
      b+=1;
      break;
    }

    }
    
    Serial.println(b);

    if(b==4)
    {
      break;
    }
    t2=millis();

    if(t2-myTime1>interval_2)
    {
      goto start;
    }

}
  myTime2=millis();
  Serial.println(myTime2);
  Serial.println(myTime2-myTime1);

  if(b==4 && myTime2-myTime1<interval){

    //Serial.println(myTime2-myTime1);
    WiFiDrv::digitalWrite(RedLED, LOW);
    WiFiDrv::digitalWrite(BlueLED, HIGH);
    delay(500);
    WiFiDrv::digitalWrite(RedLED, LOW);
    WiFiDrv::digitalWrite(BlueLED, LOW);
    WiFiDrv::digitalWrite(GreenLED, HIGH);

    if(servopos==90)
    {
    myservo.write(0);
    servopos=0;
    digitalWrite(Led,HIGH);
    }
    else{
    myservo.write(90);
    servopos=90;
    digitalWrite(Led,LOW);

    }
    err = radarShield.getMotion(motion);
    if(err == OK)
    {
      while(motion==Bgt60::MOTION){
          err = radarShield.getMotion(motion);
          if(err == OK){
            if (motion!=Bgt60::MOTION) 
               { 
                break;
                }
          }
      }

    }   

    WiFiDrv::digitalWrite(RedLED, LOW);
    WiFiDrv::digitalWrite(BlueLED, LOW);
    WiFiDrv::digitalWrite(GreenLED, LOW);   
  
  } //if(myTime2-myTime1<interval) end

             }     //if (motion==Bgt60::MOTION) end                        

    
} // if(err) end
   
else{
    WiFiDrv::digitalWrite(RedLED, LOW);
    WiFiDrv::digitalWrite(BlueLED, LOW);
    WiFiDrv::digitalWrite(GreenLED, LOW);
    Serial.println("No Motion");
  }
  
} // loop end
